package com.sysquare.ims.model.domain;

// Generated 28 Aug, 2012 9:23:52 PM by Hibernate Tools 3.2.1.GA

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user")
public class User implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Integer userId;
	private Role role;
	private String firstName;
	private String lastName;
	private String email;
	private String password;
	private Date lastLoginDate;
	private Date createDate;
	private Date lastModifiedDate;
	private boolean isActive;
	private Set<Paper> papers = new HashSet<Paper>(0);
	private Set<Student> students = new HashSet<Student>(0);
	private Set<Note> notes = new HashSet<Note>(0);
	private Set<StudentSmsLog> studentSmsLogs = new HashSet<StudentSmsLog>(0);
	private Set<Student> students_1 = new HashSet<Student>(0);
    private User updatedBy;
    	
	List<String> warnings = new ArrayList<String>();

	public User() {
	}

	public User(Role role, User user, String email, String password,
			Date lastLoginDate, Date lastModifiedDate, boolean isActive) {
		this.role = role;
		this.email = email;
		this.password = password;
		this.lastLoginDate = lastLoginDate;
		this.lastModifiedDate = lastModifiedDate;
		this.isActive = isActive;
	}

	public User(Role role, User user, String firstName, String lastName,
			String email, String password, Date lastLoginDate, Date createDate,
			Date lastModifiedDate, boolean isActive, Set<Paper> papers,
			Set<Student> students, Set<Note> notes,
			Set<StudentSmsLog> studentSmsLogs, User updatedBy,
			Set<Student> students_1) {
		this.role = role;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.password = password;
		this.lastLoginDate = lastLoginDate;
		this.createDate = createDate;
		this.lastModifiedDate = lastModifiedDate;
		this.isActive = isActive;
		this.papers = papers;
		this.students = students;
		this.notes = notes;
		this.studentSmsLogs = studentSmsLogs;
		this.updatedBy = updatedBy;
		this.students_1 = students_1;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id", nullable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "first_name", length = 64)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", length = 64)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email", unique = true, nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 32)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "last_login_date", nullable = false, length = 10)
	public Date getLastLoginDate() {
		return this.lastLoginDate;
	}

	public void setLastLoginDate(Date lastLoginDate) {
		this.lastLoginDate = lastLoginDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "create_date", length = 19)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_modified_date", nullable = false, length = 19)
	public Date getLastModifiedDate() {
		return this.lastModifiedDate;
	}

	public void setLastModifiedDate(Date lastModifiedDate) {
		this.lastModifiedDate = lastModifiedDate;
	}

	@Column(name = "is_active", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Paper> getPapers() {
		return this.papers;
	}

	public void setPapers(Set<Paper> papers) {
		this.papers = papers;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Student> getStudents() {
		return this.students;
	}

	public void setStudents(Set<Student> students) {
		this.students = students;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Note> getNotes() {
		return this.notes;
	}

	public void setNotes(Set<Note> notes) {
		this.notes = notes;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<StudentSmsLog> getStudentSmsLogs() {
		return this.studentSmsLogs;
	}

	public void setStudentSmsLogs(Set<StudentSmsLog> studentSmsLogs) {
		this.studentSmsLogs = studentSmsLogs;
	}

	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "updated_by", nullable=false)
	public User getUpdatedBy() {
        return updatedBy;
    }

    public void setUpdatedBy(User updatedBy) {
        this.updatedBy = updatedBy;
    }

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Student> getStudents_1() {
		return this.students_1;
	}

	public void setStudents_1(Set<Student> students_1) {
		this.students_1 = students_1;
	}

	@Transient
	public List<String> getWarnings() {
        return warnings;
    }
    
	@Transient
    public String getFullName() {
        String fullName = this.getFirstName();
        if(this.getLastName() != null && !this.getLastName().isEmpty()) {
            fullName =  fullName + " " + this.getLastName();
        }
        return fullName;
    }
    
	@Transient
    public boolean isAdminUser() {
		return getRole() != null && getRole().getName() != null
				&& getRole().getName().equals("admin");
	}
}
